{"version":3,"sources":["serviceWorker.js","Card.js","CardList.js","robots.js","SearchBox.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robotBuddies","robots","map","robot","src_Card","key","username","SearchBox","searchField","searchChange","type","placeholder","onChange","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","robotFriends","onSearchChange","bind","assertThisInitialized","event","setState","target","value","_this2","filteredRobots","filter","toLowerCase","includes","src_SearchBox","src_CardList","Component","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3d804fef.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className=\"bg-light-green dib br3 ma2 pa2 grow bw2 shadow-5\">\n            <img src={ `https://robohash.org/${ id }` } alt='avatar' />\n            <div>\n                <h2>{ name }</h2>\n                <p>{ email }</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({ robots }) => {\n    const robotBuddies = robots.map(robot => <Card key={ `robot-friend-${ robot.id }` } name={robot.name} email={ robot.email } id={ robot.id } />);\n    return (\n        <div>\n           { robotBuddies }\n        </div>\n    );\n}\n\n\nexport default CardList;","export const robots = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz'\n  }\n];\n","import React from 'react';\n\n\nconst SearchBox = ({searchField, searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search'\n                placeholder='search robots'\n                onChange={ searchChange }\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React, { Component } from 'react';\nimport CardList from './CardList';\nimport { robots } from './robots';\nimport SearchBox from './SearchBox';\nimport './App.css';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            searchField: '',\n            robotFriends: robots\n        }\n        this.onSearchChange = this.onSearchChange.bind(this);\n    }\n\n    onSearchChange(event) {\n        this.setState({searchField: event.target.value});\n    }\n\n    render() {\n        const filteredRobots = this.state.robotFriends.filter(robot => \n            robot.name.toLowerCase().includes(this.state.searchField.toLowerCase()))\n        return(\n            <div className='tc'>\n                <h1 className='f1'>Robofriends</h1>\n                <SearchBox searchChange={ this.onSearchChange } />\n                <CardList robots={ filteredRobots } />\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\nimport 'tachyons';\n\nReactDOM.render(<App />, \n                document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}